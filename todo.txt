add admin tags to users
ip banning
account muting
lock chat
timestamps


function openSettings() {
    document.getElementById("settingsOverlay").style.display = "flex";
}

function closeSettings() {
    document.getElementById("settingsOverlay").style.display = "none";
}

function openUserControl(username, userId, permissionLevel) {
    const overlay = document.getElementById("userControlOverlay");
    const title = document.getElementById("userControlTitle");
    const permissionForm = document.getElementById("permissionForm");
    const resetForm = document.getElementById("resetForm");
    const deleteForm = document.getElementById("deleteForm");
    const permissionSelect = document.querySelector(".permission-select-modal");

    // Set title
    title.textContent = `User Controls - ${username}`;

    // Set form actions dynamically
    permissionForm.action = `{{ url_for('update_permission', user_id='PLACEHOLDER') }}`.replace('PLACEHOLDER', userId);
    resetForm.action = `{{ url_for('reset_password', user_id='PLACEHOLDER') }}`.replace('PLACEHOLDER', userId);
    deleteForm.action = `{{ url_for('delete_user', user_id='PLACEHOLDER') }}`.replace('PLACEHOLDER', userId);

    // Set current permission level in dropdown
    permissionSelect.value = permissionLevel;

    // Remove any previous submit event listener on permissionForm to avoid duplicates
    permissionForm.onsubmit = null;

    // Add new submit event listener with closure capturing username
    permissionForm.addEventListener("submit", function handler(event) {
        event.preventDefault();

        const selectedPermission = permissionSelect.value;

        let message = "";
        switch (selectedPermission) {
            case "0":
                message = "User set to Default User.";
                break;
            case "1":
                message = "User promoted to Mod.";
                break;
            case "2":
                message = "User promoted to Admin.";
                break;
            case "3":
                message = "User promoted to Owner.";
                break;
            default:
                message = "Invalid permission level selected.";
        }

        if (confirm(`Are you sure you want to update ${username}'s permission level to: ${message}`)) {
            // Remove this listener after submit so it doesn't trigger multiple times
            permissionForm.removeEventListener("submit", handler);
            permissionForm.submit();
        }
    });

    // Confirmation for reset password
    resetForm.onsubmit = function(e) {
        if (!confirm(`Are you sure you want to reset ${username}'s password to 'password123'?`)) {
            e.preventDefault();
        }
    };

    // Confirmation for delete user
    deleteForm.onsubmit = function(e) {
        if (!confirm(`Are you sure you want to delete user ${username}? This action cannot be undone.`)) {
            e.preventDefault();
        }
    };

    // Display overlay
    overlay.style.display = "flex";
}

function closeUserControl() {
    document.getElementById("userControlOverlay").style.display = "none";
}

// Close overlay when clicking outside the modal
window.onclick = function(event) {
    const settingsOverlay = document.getElementById('settingsOverlay');
    const userControlOverlay = document.getElementById('userControlOverlay');

    if (event.target === settingsOverlay) {
        closeSettings();
    }

    if (event.target === userControlOverlay) {
        closeUserControl();
    }
};

// Save scroll position before form submits and restore on load
document.addEventListener('DOMContentLoaded', () => {
    // Restore scroll position if exists
    const scrollY = sessionStorage.getItem('scrollY');
    if (scrollY) {
        window.scrollTo(0, parseInt(scrollY));
        sessionStorage.removeItem('scrollY');
    }

    // Attach event listener to all forms to save scroll position on submit
    document.querySelectorAll('form').forEach(form => {
        form.addEventListener('submit', () => {
            sessionStorage.setItem('scrollY', window.scrollY);
        });
    });
});